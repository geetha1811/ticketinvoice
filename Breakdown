Here is the complete setup for the Breakdown component, including all required files and the QuickSearch feature you mentioned. I will create the structure step-by-step and cover all necessary files, modules, and functionalities.


---

1. Create the Breakdown Component

Generate the component using Angular CLI:

ng generate component breakdown


---

2. Breakdown Component Files

breakdown.component.html

This file includes the QuickSearch and other functionalities:

<div>
  <ng4-loading-spinner [threshold]="1" [timeout]="60000" [zIndex]="100000"></ng4-loading-spinner>

  <form [formGroup]="breakdownForm">
    <mat-accordion>
      <mat-expansion-panel class="mat-expansion-panel-one" [expanded]="true">
        <div class="form-row">
          <!-- RC/CRC Category Dropdown -->
          <div class="col-sm-3">
            <div class="form-group">
              <span class="span-text">Select RC/CRC Category</span>
              <div class="input-group">
                <select
                  class="form-control form-control-alt select-style"
                  formControlName="rcCrcCategory"
                  (change)="fetchRcCrcDetails()"
                >
                  <option *ngFor="let category of rcCrcCategories" [value]="category.id">
                    {{ category.name }}
                  </option>
                </select>
              </div>
            </div>
          </div>

          <!-- QuickSearch Input -->
          <div class="col-sm-3">
            <div class="form-group">
              <span class="span-text">QuickSearch</span>
              <input
                type="text"
                class="form-control form-control-alt"
                formControlName="quickSearch"
                (input)="applyQuickSearch()"
                placeholder="Search by Basic ID"
              />
            </div>
          </div>

          <!-- Date Selection -->
          <div class="col-sm-3">
            <div class="form-group">
              <span class="span-text">Select Date</span>
              <input
                type="date"
                class="form-control form-control-alt"
                formControlName="selectedDate"
              />
            </div>
          </div>

          <!-- Run Button -->
          <div class="col-sm-3">
            <button
              type="button"
              class="btn btn-primary"
              (click)="fetchBreakdownData()"
            >
              Run
            </button>
          </div>
        </div>
      </mat-expansion-panel>
    </mat-accordion>
  </form>

  <!-- Query Output -->
  <div class="query-output">
    <table class="table table-bordered table-hover">
      <thead>
        <tr>
          <th>Date</th>
          <th>Basic ID</th>
          <th>Category</th>
          <th>Balance ID</th>
          <th>Account</th>
          <th>System ENV</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let data of filteredBreakdownData">
          <td>{{ data.date }}</td>
          <td>{{ data.basicId }}</td>
          <td>{{ data.category }}</td>
          <td>{{ data.balanceId }}</td>
          <td>{{ data.account }}</td>
          <td>{{ data.systemEnv }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


---

breakdown.component.scss

Define styles for the component:

.mat-expansion-panel-one {
  background-color: #f5f5f5;
  padding: 10px;
}

.form-group {
  margin-bottom: 15px;
}

.select-style {
  width: 100%;
  height: 35px;
  border: 1px solid #ccc;
}

.query-output {
  margin-top: 20px;
  table {
    width: 100%;
    th, td {
      padding: 8px;
      text-align: left;
    }
  }
}


---

breakdown.component.ts

Implement the logic for the component, including QuickSearch:

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-breakdown',
  templateUrl: './breakdown.component.html',
  styleUrls: ['./breakdown.component.scss'],
})
export class BreakdownComponent implements OnInit {
  breakdownForm: FormGroup;
  rcCrcCategories = [
    { id: 'category1', name: 'Category 1' },
    { id: 'category2', name: 'Category 2' },
    { id: 'category3', name: 'Category 3' },
  ];
  breakdownData: any[] = [];
  filteredBreakdownData: any[] = [];

  constructor(private fb: FormBuilder) {
    this.breakdownForm = this.fb.group({
      rcCrcCategory: [''],
      selectedDate: [''],
      quickSearch: [''],
    });
  }

  ngOnInit(): void {
    // Mock data for demonstration
    this.breakdownData = [
      {
        date: '2024-11-27',
        basicId: 'BCS2750981',
        category: 'Category 1',
        balanceId: '12345',
        account: 'Account 1',
        systemEnv: 'System A',
      },
      {
        date: '2024-11-28',
        basicId: 'BCS2750982',
        category: 'Category 2',
        balanceId: '12346',
        account: 'Account 2',
        systemEnv: 'System B',
      },
    ];
    this.filteredBreakdownData = this.breakdownData;
  }

  fetchRcCrcDetails(): void {
    const selectedCategory = this.breakdownForm.value.rcCrcCategory;
    console.log('Selected Category:', selectedCategory);
    // Fetch the relevant details based on the category
  }

  fetchBreakdownData(): void {
    const formData = this.breakdownForm.value;
    console.log('Fetching data for:', formData);
    // Filter or fetch data logic can be added here
  }

  applyQuickSearch(): void {
    const searchTerm = this.breakdownForm.value.quickSearch.toLowerCase();
    this.filteredBreakdownData = this.breakdownData.filter((data) =>
      data.basicId.toLowerCase().includes(searchTerm)
    );
  }
}


---

3. Update App Module

app.module.ts

Add the required imports and register the component:

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MatExpansionModule } from '@angular/material/expansion';
import { BreakdownComponent } from './breakdown/breakdown.component';

@NgModule({
  declarations: [BreakdownComponent],
  imports: [
    ReactiveFormsModule,
    MatExpansionModule,
    // Add other required modules here
  ],
  bootstrap: [BreakdownComponent],
})
export class AppModule {}


---

4. Add Routing

app-routing.module.ts

Add a route for the Breakdown component:

import { BreakdownComponent } from './breakdown/breakdown.component';

const routes: Routes = [
  { path: 'breakdown', component: BreakdownComponent },
];


---

This setup includes the QuickSearch functionality and mock data to demonstrate how the component should behave. Let me know if you need further refinements!

