Hereâ€™s the Breakdown Component HTML structured exactly like your provided reference code, maintaining consistency in style, usage of classes, and Angular directives.


---

Breakdown Component HTML

<div>
  <!-- Loading Spinner -->
  <ng4-loading-spinner [threshold]="1" [timeout]="68000" [zIndex]="100000"></ng4-loading-spinner>

  <!-- Form for Breakdown -->
  <form [formGroup]="breakdownForm">
    <mat-accordion>
      <!-- Expansion Panel for Input Section -->
      <mat-expansion-panel class="mat-expansion-panel-one" [expanded]="true" style="margin-bottom: 10px;">
        <div class="form-row" style="padding: 10px;">
          <!-- Quick Search Dropdown -->
          <div class="col-sm-3">
            <div class="form-group">
              <span class="span-text">Quick Search</span>
              <div class="input-group">
                <select
                  class="form-control form-control-alt select-style"
                  id="quickSearch"
                  formControlName="quickSearch"
                  [(ngModel)]="selectedSearch"
                  (change)="onQuickSearchChange()"
                >
                  <option *ngFor="let option of searchOptions" [value]="option.value">
                    {{ option.label }}
                  </option>
                </select>
              </div>
            </div>
          </div>

          <!-- Source Description -->
          <div class="col-sm-3">
            <div class="form-group">
              <span class="span-text">Source Description</span>
              <input
                type="text"
                class="form-control form-control-alt text-style"
                formControlName="sourceDescription"
                placeholder="Enter source description"
              />
            </div>
          </div>

          <!-- Date Picker -->
          <div class="col-sm-3">
            <div class="form-group">
              <span class="span-text">Select Date</span>
              <input
                type="date"
                class="form-control form-control-alt text-style"
                formControlName="selectedDate"
              />
            </div>
          </div>

          <!-- Run Button -->
          <div class="col-sm-3">
            <div class="form-group">
              <button
                type="button"
                class="btn btn-primary"
                style="margin-top: 25px; width: 100%;"
                (click)="runQuery()"
              >
                Run
              </button>
            </div>
          </div>
        </div>
      </mat-expansion-panel>
    </mat-accordion>
  </form>

  <!-- Query Output Section -->
  <div class="query-output" style="margin-top: 20px;">
    <mat-accordion>
      <mat-expansion-panel [expanded]="true">
        <div class="form-row" style="padding: 10px; background-color: #f9f9f9;">
          <h4>Query Output</h4>
          <pre class="text-style" style="padding: 10px;">{{ queryOutput | json }}</pre>
        </div>
      </mat-expansion-panel>
    </mat-accordion>
  </div>
</div>


---

2. Breakdown Component TS

The component logic ties the form, the dropdown options, and the query output together.

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-breakdown',
  templateUrl: './breakdown.component.html',
  styleUrls: ['./breakdown.component.css'],
})
export class BreakdownComponent implements OnInit {
  breakdownForm: FormGroup;
  searchOptions = [
    { label: 'Option 1', value: 'option1' },
    { label: 'Option 2', value: 'option2' },
    { label: 'Option 3', value: 'option3' },
  ];
  selectedSearch: string = '';
  queryOutput: any = null;

  constructor(private fb: FormBuilder) {
    // Initialize form
    this.breakdownForm = this.fb.group({
      quickSearch: [''],
      sourceDescription: [''],
      selectedDate: [''],
    });
  }

  ngOnInit(): void {}

  onQuickSearchChange(): void {
    console.log('Selected Quick Search:', this.breakdownForm.value.quickSearch);
  }

  runQuery(): void {
    const formData = this.breakdownForm.value;
    console.log('Form Data:', formData);

    // Simulate query output
    this.queryOutput = {
      search: formData.quickSearch,
      description: formData.sourceDescription,
      date: formData.selectedDate,
    };
  }
}


---

3. CSS for Styling

Ensure the CSS matches the provided reference, emphasizing consistent styling.

.form-control-alt {
  border: 1px solid #ccc;
  font-size: 14px;
  background-color: #fff;
  font-family: 'Source Sans Pro', Arial, sans-serif;
}

.span-text {
  font-size: 14px;
  font-family: 'Source Sans Pro', Arial, sans-serif;
  font-weight: 400;
}

.text-style {
  border: 1px solid #ccc;
  font-size: 14px;
  padding: 5px;
  font-family: 'Source Sans Pro', Arial, sans-serif;
  background-color: #fff;
}


---

Explanation

1. Form Controls:

Each input field is bound to a form control using formControlName.

Dropdown options are generated dynamically using *ngFor.



2. Run Button:

On clicking the "Run" button, the runQuery() method is called to process the form data and display it in the query output.



3. Query Output:

The output is displayed in a pre block for easy formatting.



4. Styling:

Matches your shared CSS structure, ensuring a consistent look and feel.





---

This implementation integrates seamlessly with your reference structure while providing the necessary functionality. Let me know if you need further customizations!

